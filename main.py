from modules.report import ReportFactory
from modules.data import parse_tickers, parse_weights
from modules.data import DataCollectorFactory
from modules.interests import InvestmentSimulator
from modules.metrics import MetricsCalculatorFactory
from modules.portfolio import PortfolioFactory
import argparse
import sys
import os
from datetime import datetime
import logging
import pandas as pd 

# Adicionar o diret√≥rio atual ao path para imports
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def create_argument_parser():
    #Cria o parser de argumentos da linha de comando
    parser = argparse.ArgumentParser(description='Investment Analysis Tool')

    parser.add_argument('--tickers', nargs='+', required=True, help='Stock tickers to analyze')
    parser.add_argument('--weights', nargs='+', type=float, help='Portfolio weights')
    parser.add_argument('--start-date', required=True, help='Start date (YYYY-MM-DD)')
    parser.add_argument('--end-date', required=True, help='End date (YYYY-MM-DD)')

    parser.add_argument('--aporte-mensal', type=float, help='Monthly contribution amount')
    parser.add_argument('--capital-inicial', type=float, help='Initial capital amount')
    parser.add_argument('--taxa-juros', type=float, default=0.01, help='Monthly interest rate (default: 1%)')
    parser.add_argument('--retorno-fixo', type=float, default=0.01, help='Fixed monthly return rate for portfolio (default: 1%)')
    
    # Argumentos opcionais para Fase 1
    parser.add_argument('--save-data', action='store_true', help='Save raw data to CSV files')
    parser.add_argument('--no-plots', action='store_true', help='Skip generating plots')
    parser.add_argument('--quick', action='store_true', help='Quick mode (no plot saving)')
    parser.add_argument('--verbose', action='store_true', help='Verbose output with debug info')
    
    return parser

def validate_arguments(args):
    """Valida e ajusta argumentos"""
    # Validar datas
    try:
        datetime.strptime(args.start_date, '%Y-%m-%d')
    except ValueError:
        raise ValueError(f"Data inicial inv√°lida: {args.start_date}. Use formato YYYY-MM-DD")
    
    # Data final default √© hoje
    if args.end_date is None:
        args.end_date = datetime.now().strftime('%Y-%m-%d')
    else:
        try:
            datetime.strptime(args.end_date, '%Y-%m-%d')
        except ValueError:
            raise ValueError(f"Data final inv√°lida: {args.end_date}. Use formato YYYY-MM-DD")
    
    # Validar per√≠odo
    start_date = datetime.strptime(args.start_date, '%Y-%m-%d')
    end_date = datetime.strptime(args.end_date, '%Y-%m-%d')
    
    if start_date >= end_date:
        raise ValueError("Data inicial deve ser anterior √† data final")
    
    # Validar valores monet√°rios (s√≥ se estiver na Fase 2)
    if hasattr(args, 'aporte_mensal') and args.aporte_mensal is not None:
        if args.aporte_mensal < 0:
            raise ValueError("Aporte mensal deve ser positivo")
    
    if hasattr(args, 'capital_inicial') and args.capital_inicial is not None:
        if args.capital_inicial < 0:
            raise ValueError("Capital inicial deve ser positivo")
    
    if hasattr(args, 'taxa_juros') and args.taxa_juros is not None:
        if args.taxa_juros < 0:
            raise ValueError("Taxa de juros deve ser positiva")
    
    return args

def execute_analysis_phase_1(args, logger):
    #Executa an√°lise da Fase 1
    print("\n" + "="*80)
    print("üìä INVESTMENT SIMULATOR - FASE 1: AN√ÅLISE EXPLORAT√ìRIA")
    print("="*80)
    
    # 1. Processar tickers
    tickers = parse_tickers(args.tickers)
    logger.info(f"Tickers solicitados: {tickers}")
    print(f"üéØ Ativos para an√°lise: {', '.join(tickers)}")
    print(f"üìÖ Per√≠odo: {args.start_date} at√© {args.end_date}")
    
    # 2. Validar tickers
    collector = DataCollectorFactory.create_collector('yfinance')
    print(f"\nüîç Validando ativos dispon√≠veis...")
    
    valid_tickers, invalid_tickers = collector.validate_tickers(tickers)
    
    if invalid_tickers:
        print(f"Ativos n√£o encontrados: {', '.join(invalid_tickers)}")
    
    if not valid_tickers:
        print("Nenhum ativo v√°lido encontrado!")
        return False
    
    print(f"‚úÖ Ativos validados: {', '.join(valid_tickers)}")
    
    # 3. Coletar dados
    print(f"\nüìà Coletando dados hist√≥ricos...")
    data_dict = collector.get_multiple_stocks(valid_tickers, args.start_date, args.end_date)
    
    if not data_dict:
        print("Falha na coleta de dados!")
        return False
    
    print(f"‚úÖ Dados coletados para {len(data_dict)} ativo(s)")
    
    # 4. Resumo dos dados
    print(f"\nüìã RESUMO DOS DADOS:")
    print("-" * 60)
    
    for ticker, data in data_dict.items():
        price_start = data['Close'].iloc[0]
        price_end = data['Close'].iloc[-1]
        retorno = (price_end / price_start - 1) * 100
        
        print(f"{ticker:>12} | {len(data):>4} dias | "
              f"R$ {price_start:>8.2f} ‚Üí R$ {price_end:>8.2f} | "
              f"{retorno:>6.1f}%")
    
    # 5. Processaar pesos da carteira
    weights = parse_weights(args.weights, len(valid_tickers))
    
    print(f"\n‚öñÔ∏è  COMPOSI√á√ÉO DA CARTEIRA:")
    print("-" * 40)
    for ticker, weight in zip(valid_tickers, weights):
        print(f"{ticker:>12}: {weight:>6.1%}")
    
    # 6. Salvar dados se solicitado
    if args.save_data:
        print(f"\nüíæ Salvando dados...")
        os.makedirs('data/raw', exist_ok=True)
        
        for ticker, data in data_dict.items():
            filename = f'data/raw/{ticker}_{args.start_date}_{args.end_date}.csv'
            data.to_csv(filename)
            logger.info(f"Dados salvos: {filename}")
        
        print(f"‚úÖ Dados salvos em data/raw/")
    
    # 7. Gerar relat√≥rios visuais
    if not args.no_plots:
        print(f"\nüìä Gerando an√°lises visuais...")
        
        report = ReportFactory.create_default_report()
        save_plots = not args.quick
        
        # An√°lise individual da primeira a√ß√£o (ou √∫nica)
        first_ticker = valid_tickers[0]
        first_data = data_dict[first_ticker]
        report.plot_single_stock(first_data, first_ticker, save=save_plots)
        
        # Se m√∫ltiplas a√ß√µes, fazer compara√ß√£o
        if len(data_dict) > 1:
            report.plot_comparison(data_dict, save=save_plots)
            report.plot_correlation_heatmap(data_dict, save=save_plots)
        
        # Estat√≠sticas detalhadas
        stats_df = report.generate_summary_stats(data_dict)
    
    # Informa√ß√µes para debug
    if args.verbose:
        print(f"\nüîß DEBUG INFO:")
        print(f"  - Cache ativo: {len(collector.cache)} entradas")
        print(f"  - Mem√≥ria de dados: {sum(data.memory_usage().sum() for data in data_dict.values()) / 1024 / 1024:.1f} MB")
    
    print("="*80)
    logger.info("An√°lise da Fase 1 conclu√≠da com sucesso")
    
    return True

def execute_analysis_phase2(args, logger):
    """Executa Fase 2: Simula√ß√£o de investimentos COMPLETA"""
    logger.info("=== FASE 2: Simula√ß√£o de investimentos COMPLETA ===")
    
    # 1. COLETAR DADOS REAIS (Yahoo Finance)
    print("\n COLETANDO DADOS REAIS DAS A√á√ïES:")
    print("-" * 50)
    
    collector = DataCollectorFactory.create_collector('yfinance')
    stock_data = collector.get_multiple_stocks(args.tickers, args.start_date, args.end_date)
    
    if not stock_data:
        print("‚ùå Falha na coleta de dados! Usando simula√ß√£o com retorno fixo.")
        logger.warning("Falha na coleta de dados - usando retorno fixo")
        stock_data = {}  # Vazio para usar retorno fixo
    else:
        print(f"‚úÖ Dados coletados para {len(stock_data)} ativo(s)")
        
        # Mostrar resumo dos dados
        for ticker, data in stock_data.items():
            price_start = data['Close'].iloc[0]
            price_end = data['Close'].iloc[-1]
            retorno = (price_end / price_start - 1) * 100
            print(f"  {ticker}: R$ {price_start:.2f} ‚Üí R$ {price_end:.2f} ({retorno:.1f}%)")
    
    # 2. Criar simulador
    simulador = InvestmentSimulator(
        initial_capital=args.capital_inicial,
        monthly_contribution=args.aporte_mensal,
        monthly_interest_rate=args.taxa_juros
    )
    
    # 3. Simular cen√°rios
    print("\n SIMULANDO CEN√ÅRIOS:")
    print("-" * 50)
    
    df_juros = simulador.simulate_fixed_interest_scenario(
        start_date=args.start_date,
        end_date=args.end_date
    )
    print("‚úÖ Simula√ß√£o de juros fixos conclu√≠da")
    
    # ‚úÖ CORRE√á√ÉO: Passar stock_data como primeiro par√¢metro
    df_carteira = simulador.simulate_stock_portfolio_scenario(
        stock_data=stock_data,  # ‚úÖ CORRETO! Primeiro par√¢metro
        weights=args.weights,
        start_date=args.start_date,
        end_date=args.end_date,
        monthly_return_rate=args.retorno_fixo
    )
    
    # Verificar tipo de simula√ß√£o
    if not stock_data:
        print("‚úÖ Simula√ß√£o de carteira com retorno fixo conclu√≠da")
    else:
        print("‚úÖ Simula√ß√£o de carteira com dados reais conclu√≠da")
    
    # 4. Comparar e gerar relat√≥rio
    comparacao = simulador.compare_scenarios(df_juros, df_carteira)
    metrics_calculator = MetricsCalculatorFactory.create_calculator('performance')
    metricas_juros = metrics_calculator.calculate_metrics(df_juros)
    metricas_carteira = metrics_calculator.calculate_metrics(df_carteira)
    
    # 5. An√°lise de portf√≥lio
    portfolio_manager = PortfolioFactory.create_portfolio_manager(args.tickers, args.weights)
    portfolio_analysis = portfolio_manager.analyze_portfolio()
    pesos_iguais = [1/len(args.tickers)] * len(args.tickers)
    rebalanceamento = portfolio_manager.suggest_rebalancing(pesos_iguais)

    print("\n" + "="*80)
    print("üèÜ INVESTMENT SIMULATOR - FASE 2: RELAT√ìRIO EXECUTIVO")
    print("="*80)
    
    # A) PAR√ÇMETROS DA SIMULA√á√ÉO
    print("\nüìã PAR√ÇMETROS DA SIMULA√á√ÉO:")
    print("-" * 50)
    print(f"ÔøΩÔøΩ Capital Inicial: R$ {args.capital_inicial:,.2f}")
    print(f"üìà Aporte Mensal: R$ {args.aporte_mensal:,.2f}")
    print(f"üìÖ Per√≠odo: {args.start_date} at√© {args.end_date}")
    print(f"ÔøΩÔøΩ Ativos: {', '.join(args.tickers)}")
    print(f"‚öñÔ∏è  Pesos: {', '.join([f'{w:.1%}' for w in args.weights])}")
    
    # B) RESULTADO FINAL COMPARATIVO
    if not comparacao.empty:
        ultima_linha = comparacao.iloc[-1]
        print("\nüèÜ RESULTADO FINAL COMPARATIVO:")
        print("-" * 50)
        print(f"üí∞ CAPITAL FINAL:")
        print(f"  ÔøΩÔøΩ Juros Fixos:     R$ {ultima_linha['Fixed_Interest_Capital']:>12,.2f}")
        print(f"  ÔøΩÔøΩ Carteira A√ß√µes:  R$ {ultima_linha['Stock_Portfolio_Capital']:>12,.2f}")
        print(f"  ÔøΩÔøΩ Diferen√ßa:       R$ {ultima_linha['Capital_Difference']:>12,.2f}")
        
        # Calcular vantagem
        if ultima_linha['Capital_Difference'] > 0:
            vantagem_percentual = (ultima_linha['Capital_Difference'] / ultima_linha['Fixed_Interest_Capital']) * 100
            print(f"\nüèÜ Carteira de A√ß√µes venceu por {vantagem_percentual:.1f}%")
        else:
            vantagem_percentual = (abs(ultima_linha['Capital_Difference']) / ultima_linha['Stock_Portfolio_Capital']) * 100
            print(f"\n Juros Fixos venceram por {vantagem_percentual:.1f}%")
    
    # C) M√âTRICAS DETALHADAS
    print("\nüìä M√âTRICAS DETALHADAS:")
    print("-" * 50)
    
    # M√©tricas do Juros Fixos
    print("ÔøΩÔøΩ JUROS FIXOS:")
    if 'Final_Capital' in metricas_juros:
        print(f"  Capital Final: R$ {metricas_juros['Final_Capital']:>12,.2f}")
    if 'Total_Return' in metricas_juros:
        print(f"  Retorno Total: {metricas_juros['Total_Return']:>12,.2f}%")
    if 'CAGR' in metricas_juros:
        print(f"  CAGR: {metricas_juros['CAGR']*100:>12,.2f}%")
    if 'Annual_Volatility' in metricas_juros:
        print(f"  Volatilidade: {metricas_juros['Annual_Volatility']:>12,.2f}%")
    
    # M√©tricas da Carteira
    print("\nüü• CARTEIRA DE A√á√ïES:")
    if 'Final_Capital' in metricas_carteira:
        print(f"  Capital Final: R$ {metricas_carteira['Final_Capital']:>12,.2f}")
    if 'Total_Return' in metricas_carteira:
        print(f"  Retorno Total: {metricas_carteira['Total_Return']:>12,.2f}%")
    if 'CAGR' in metricas_carteira:
        print(f"  CAGR: {metricas_carteira['CAGR']*100:>12,.2f}%")
    if 'Annual_Volatility' in metricas_carteira:
        print(f"  Volatilidade: {metricas_carteira['Annual_Volatility']:>12,.2f}%")
    if 'Max_Drawdown' in metricas_carteira:
        print(f"  Max Drawdown: {metricas_carteira['Max_Drawdown']:>12,.2f}%")
    if 'Sharpe_Ratio' in metricas_carteira:
        print(f"  Sharpe Ratio: {metricas_carteira['Sharpe_Ratio']:>12,.3f}")
    
    # D) AN√ÅLISE DO PORTF√ìLIO
    print("\nÔøΩÔøΩ AN√ÅLISE DO PORTF√ìLIO:")
    print("-" * 50)
    print(f"ÔøΩÔøΩ Total de Ativos: {portfolio_analysis['summary']['total_assets']}")
    print(f"üìä Maior Posi√ß√£o: {portfolio_analysis['summary']['largest_position']['ticker']} ({portfolio_analysis['summary']['largest_position']['weight']:.1f}%)")
    print(f"üìä Menor Posi√ß√£o: {portfolio_analysis['summary']['smallest_position']['ticker']} ({portfolio_analysis['summary']['smallest_position']['weight']:.1f}%)")
    print(f"‚ö†Ô∏è  N√≠vel de Concentra√ß√£o: {portfolio_analysis['summary']['concentration_level']}")
    print(f"üéØ Score de Diversifica√ß√£o: {portfolio_analysis['summary']['diversification_score']}/100")
    print(f"üí° Recomenda√ß√£o: {portfolio_analysis['summary']['recommendation']}")
    
    # E) SUGEST√ïES DE REBALANCEAMENTO
    print("\n‚öñÔ∏è SUGEST√ïES DE REBALANCEAMENTO (pesos iguais):")
    print("-" * 50)
    for ticker, info in rebalanceamento.items():
        action_emoji = "ÔøΩÔøΩ" if info['Action'] == 'Comprar' else "ÔøΩÔøΩ" if info['Action'] == 'Vender' else "ÔøΩÔøΩ"
        print(f"{action_emoji} {ticker:>8}: {info['Action']:>6} {abs(info['Weight_Change']):>6.1f}%")
    
    # F) COMPARA√á√ÉO DETALHADA
    print("\n" + metrics_calculator.compare_metrics(
        metricas_juros, metricas_carteira, 
        "Juros Fixos", "Carteira de A√ß√µes"
    ))
    
    # G) EVOLU√á√ÉO COMPARATIVA (TABELA)
    if not comparacao.empty:
        print("\nüìä EVOLU√á√ÉO COMPARATIVA:")
        print("-" * 80)
        print(f"{'Data':<12} {'Juros Fixos':<15} {'Carteira A√ß√µes':<15} {'Diferen√ßa':<15}")
        print("-" * 80)
        
        # Mostrar algumas linhas representativas
        for i in range(0, len(comparacao), max(1, len(comparacao)//6)):  
            linha = comparacao.iloc[i]
            if pd.notna(linha['Date']):  
                date_str = linha['Date'].strftime('%Y-%m')
            else:
                date_str = "Data Inv√°lida"

            print(f"{date_str:<12} "
                f"R$ {linha['Fixed_Interest_Capital']:<13,.0f} "
                f"R$ {linha['Stock_Portfolio_Capital']:<13,.0f} "
                f"R$ {linha['Capital_Difference']:<13,.0f}")
    
    # H) AN√ÅLISE DE CRUZAMENTOS
    if not comparacao.empty:
        comparacao['Cruzamento'] = comparacao['Capital_Difference'].abs() < 1000
        cruzamentos = comparacao[comparacao['Cruzamento']]
        
        if not cruzamentos.empty:
            print("\nüîÑ PONTOS DE CRUZAMENTO:")
            print("-" * 50)
            for _, linha in cruzamentos.iterrows():
                print(f"ÔøΩÔøΩ {linha['Date'].strftime('%Y-%m')} - Capital: R$ {linha['Fixed_Interest_Capital']:,.2f}")
        else:
            print("\nüîÑ Nenhum ponto de cruzamento encontrado no per√≠odo")
    
    print("\n" + "="*80)
    print("‚úÖ RELAT√ìRIO DA FASE 2 CONCLU√çDO!")
    print("="*80)

   # report = ReportFactory.create_report('stock')
   # report.plot_comparison_scenarios(df_juros, df_carteira)
   # report.plot_aportes_analysis(df_juros, df_carteira)
   # report.print_metrics_summary(metricas_juros, metricas_carteira)
    
    logger.info("‚úÖ Fase 2 conclu√≠da!")

def execute_analysis(args, logger):
    #Dispatcher: escolhe entre Fase 1 ou Fase 2 baseado nos argumentos"""
    if args.aporte_mensal and args.capital_inicial:
        # Tem argumentos de simula√ß√£o = Fase 2
        execute_analysis_phase2(args, logger)
    else:
        # S√≥ an√°lise b√°sica = Fase 1
        execute_analysis_phase_1(args, logger)

def main():
    #Fun√ß√£o principal
    # Parser de argumentos
    parser = create_argument_parser()
    try:
        args = parser.parse_args()
        args = validate_arguments(args)
    except ValueError as e:
        print(f"Erro nos argumentos: {e}")
        parser.print_help()
        sys.exit(1)
    except SystemExit:
        # argparse chamou sys.exit (--help, argumentos inv√°lidos)
        sys.exit(1)
    
    logger.info("üöÄ Investment Simulator iniciado")
    logger.info(f"Argumentos: {vars(args)}")
    
    try:
        execute_analysis(args, logger)  
    except KeyboardInterrupt:
        print(f"\n\n Execu√ß√£o interrompida pelo usu√°rio")
        logger.info("Execu√ß√£o interrompida pelo usu√°rio")
        sys.exit(0)
        
    except Exception as e:
        print(f"\n Erro inesperado: {e}")
        logger.exception("Erro inesperado durante a execu√ß√£o")
        sys.exit(1)
if __name__ == "__main__":
    main()