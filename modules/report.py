# modules/reports.py
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np
from typing import Dict, List, Optional
from abc import ABC, abstractmethod
import logging
import os
from datetime import datetime

logger = logging.getLogger(__name__)

class ReportGenerator(ABC):
    #Interface base para geradores de relat√≥rios
    @abstractmethod
    def generate_report(self, data: Dict, **kwargs) -> bool:

        pass

class SimpleReportGenerator(ReportGenerator):
    #Gerador de relat√≥rios simples e unificado
    
    def __init__(self, output_dir: str = 'outputs'):
        self.output_dir = output_dir
        self.setup_style()
        os.makedirs(output_dir, exist_ok=True)
        logger.info(f"SimpleReportGenerator inicializado - output: {output_dir}")
    
    def setup_style(self):
        #Configura estilo padr√£o dos gr√°ficos
        plt.style.use('seaborn-v0_8')
        sns.set_palette("husl")
        
        # Configura√ß√µes para melhor qualidade
        plt.rcParams['figure.dpi'] = 100
        plt.rcParams['savefig.dpi'] = 300
        plt.rcParams['font.size'] = 10
        plt.rcParams['axes.titlesize'] = 12
        plt.rcParams['axes.labelsize'] = 10
        plt.rcParams['xtick.labelsize'] = 9
        plt.rcParams['ytick.labelsize'] = 9
        plt.rcParams['legend.fontsize'] = 10
    
    def generate_report(self, data: Dict, **kwargs) -> bool:
        #Gera relat√≥rio baseado no tipo de dados"""
        report_type = kwargs.get('report_type', 'auto')
        
        try:
            if report_type == 'integrated':
                self._generate_integrated_report(data, **kwargs)
            elif report_type == 'phase1' or 'stock_data' in data:
                self._generate_phase1_report(data, **kwargs)
            elif report_type == 'phase2' or 'comparacao' in data:
                self._generate_phase2_report(data, **kwargs)
            else:
                self._generate_generic_report(data, **kwargs)
            
            logger.info("Relat√≥rio gerado com sucesso")
            return True
            
        except Exception as e:
            logger.error(f"Erro ao gerar relat√≥rio: {e}")
            return False
    
    def _generate_phase1_report(self, data: Dict, **kwargs):
        #Gera relat√≥rio da Fase 1: An√°lise explorat√≥ria
        
        # Gr√°fico de pre√ßos das a√ß√µes
        if 'stock_data' in data:
            self._plot_stock_prices(data['stock_data'], **kwargs)
        
        # Gr√°fico de correla√ß√£o
        if 'stock_data' in data and len(data['stock_data']) > 1:
            self._plot_correlation_heatmap(data['stock_data'], **kwargs)
        
        #  Gr√°fico de retornos
        if 'stock_data' in data:
            self._plot_returns(data['stock_data'], **kwargs)
    
    def _generate_phase2_report(self, data: Dict, **kwargs):
        #Gera relat√≥rio da Fase 2: Simula√ß√£o de investimentos"""
        print(f"üîç DEBUG: Gerando relat√≥rio Fase 2 com dados: {list(data.keys())}")
        
        # 1. Gr√°fico comparativo dos cen√°rios
        if 'comparacao' in data:
            print(f"‚úÖ Gerando gr√°fico comparativo...")
            self._plot_scenario_comparison(data['comparacao'], **kwargs)
        else:
            print(f"‚ùå Dados de compara√ß√£o n√£o encontrados")
        
        # 2. Gr√°fico de evolu√ß√£o do capital
        if 'juros_fixos' in data and 'carteira_acoes' in data:
            print(f"‚úÖ Gerando gr√°fico de evolu√ß√£o do capital...")
            self._plot_capital_evolution(data, **kwargs)
        else:
            print(f"‚ùå Dados de evolu√ß√£o n√£o encontrados: juros_fixos={('juros_fixos' in data)}, carteira_acoes={('carteira_acoes' in data)}")
        
        # 3. Gr√°fico de m√©tricas comparativas
        if 'metricas_juros' in data and 'metricas_carteira' in data:
            print(f"‚úÖ Gerando gr√°fico de m√©tricas...")
            self._plot_metrics_comparison(data, **kwargs)
        else:
            print(f"‚ùå Dados de m√©tricas n√£o encontrados: metricas_juros={('metricas_juros' in data)}, metricas_carteira={('metricas_carteira' in data)}")

    def _plot_stock_prices(self, stock_data: Dict, **kwargs):
        #Plota pre√ßos das a√ß√µes
        fig, ax = plt.subplots(figsize=(12, 6))
        
        valid_data_count = 0
        for ticker, data in stock_data.items():
            if 'Close' in data.columns:
                ax.plot(data.index, data['Close'], label=ticker, linewidth=2)
                valid_data_count += 1
                print(f"‚úÖ Plotando {ticker} usando pre√ßos de fechamento")
            else:
                print(f"‚ùå Coluna 'Close' n√£o encontrada para {ticker}")
        
        if valid_data_count == 0:
            print("‚ö†Ô∏è Nenhum dado v√°lido encontrado para plotar pre√ßos")
            plt.close(fig)
            return
        
        ax.set_title('Evolu√ß√£o dos Pre√ßos das A√ß√µes', fontsize=14, fontweight='bold')
        ax.set_xlabel('Data')
        ax.set_ylabel('Pre√ßo (R$)')
        ax.legend()
        ax.grid(True, alpha=0.3)
        
        # Corrigir rota√ß√£o e layout
        plt.xticks(rotation=45, ha='right')
        plt.tight_layout()
        
        # Salvar e exibir
        filename = f"{self.output_dir}/precos_acoes.png"
        fig.savefig(filename, dpi=300, bbox_inches='tight')
        plt.show()
        plt.close(fig)
        print(f"üìä Gr√°fico de pre√ßos salvo: {filename}")
    
    def _plot_correlation_heatmap(self, stock_data: Dict, **kwargs):
        #Plota mapa de correla√ß√£o
        if len(stock_data) < 2:
            return
        
        # Calcular correla√ß√µes
        returns_data = {}
        for ticker, data in stock_data.items():
            if 'Close' in data.columns:
                returns_data[ticker] = data['Close'].pct_change().dropna()
                print(f"‚úÖ Calculando correla√ß√£o para {ticker}")
            else:
                print(f"‚ùå Coluna 'Close' n√£o encontrada para {ticker}")
        
        if len(returns_data) < 2:
            print("‚ö†Ô∏è Dados insuficientes para mapa de correla√ß√£o")
            return
        
        correlation_df = pd.DataFrame(returns_data).corr()
        
        fig, ax = plt.subplots(figsize=(8, 6))
        sns.heatmap(correlation_df, annot=True, cmap='coolwarm', center=0, 
                   square=True, linewidths=0.5)
        ax.set_title('Correla√ß√£o entre A√ß√µes', fontsize=14, fontweight='bold')
        
        # Corrigir layout
        plt.tight_layout()
        
        # Salvar e exibir
        filename = f"{self.output_dir}/correlacao_acoes.png"
        fig.savefig(filename, dpi=300, bbox_inches='tight')
        plt.show()
        plt.close(fig)
        print(f"üìä Mapa de correla√ß√£o salvo: {filename}")
    
    def _plot_returns(self, stock_data: Dict, **kwargs):
        """Plota retornos das a√ß√µes"""
        fig, ax = plt.subplots(figsize=(12, 6))
        
        valid_data_count = 0
        for ticker, data in stock_data.items():
            if 'Close' in data.columns:
                returns = data['Close'].pct_change().dropna()
                ax.plot(returns.index, returns, label=ticker, alpha=0.7)
                valid_data_count += 1
                print(f"‚úÖ Plotando retornos de {ticker}")
            else:
                print(f"‚ùå Coluna 'Close' n√£o encontrada para {ticker}")
        
        if valid_data_count == 0:
            print("‚ö†Ô∏è Nenhum dado v√°lido encontrado para plotar retornos")
            plt.close(fig)
            return
        
        ax.set_title('Retornos Di√°rios das A√ß√µes', fontsize=14, fontweight='bold')
        ax.set_xlabel('Data')
        ax.set_ylabel('Retorno (%)')
        ax.legend()
        ax.grid(True, alpha=0.3)
        
        # Corrigir rota√ß√£o e layout
        plt.xticks(rotation=45, ha='right')
        plt.tight_layout()
        
        # Salvar e exibir
        filename = f"{self.output_dir}/retornos_acoes.png"
        fig.savefig(filename, dpi=300, bbox_inches='tight')
        plt.show()
        plt.close(fig)
        print(f"üìä Gr√°fico de retornos salvo: {filename}")
    
    def _plot_scenario_comparison(self, comparacao: pd.DataFrame, **kwargs):
        #Plota compara√ß√£o dos cen√°rios
        if comparacao.empty:
            return
        
        # Identificar colunas
        juros_col = self._find_column(comparacao, ['Fixed_Interest_Capital', 'Juros_Fixos'])
        carteira_col = self._find_column(comparacao, ['Stock_Portfolio_Capital', 'Carteira_Acoes'])
        
        if juros_col is None or carteira_col is None:
            return
        
        fig, ax = plt.subplots(figsize=(14, 8))
        
        ax.plot(comparacao.index, comparacao[juros_col], 
               label='Juros Fixos', linewidth=2, color='green', marker='o')
        ax.plot(comparacao.index, comparacao[carteira_col], 
               label='Carteira de A√ß√µes', linewidth=2, color='blue', marker='s')
        
        ax.set_title('Compara√ß√£o: Juros Fixos vs Carteira de A√ß√µes', 
                    fontsize=16, fontweight='bold')
        ax.set_xlabel('Data')
        ax.set_ylabel('Capital (R$)')
        ax.legend(fontsize=12)
        ax.grid(True, alpha=0.3)
        
        # Corrigir rota√ß√£o e layout
        plt.xticks(rotation=45, ha='right')
        plt.tight_layout()
        
        # Salvar e exibir
        filename = f"{self.output_dir}/comparacao_cenarios.png"
        fig.savefig(filename, dpi=300, bbox_inches='tight')
        plt.show()
        plt.close(fig)
        print(f"üìä Gr√°fico comparativo salvo: {filename}")
    
    def _plot_capital_evolution(self, data: Dict, **kwargs):
        #Plota evolu√ß√£o do capital
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 10))
        
        # Gr√°fico 1: Juros Fixos
        if 'juros_fixos' in data:
            juros_data = data['juros_fixos']
            capital_col = self._find_column(juros_data, ['Capital_Acumulado', 'Accumulated_Capital'])
            if capital_col:
                ax1.plot(juros_data.index, juros_data[capital_col], 
                        color='green', linewidth=2, marker='o')
                ax1.set_title('Evolu√ß√£o do Capital - Juros Fixos', fontweight='bold')
                ax1.set_ylabel('Capital (R$)')
                ax1.grid(True, alpha=0.3)
        
        # Gr√°fico 2: Carteira de A√ß√µes
        if 'carteira_acoes' in data:
            carteira_data = data['carteira_acoes']
            capital_col = self._find_column(carteira_data, ['Capital_Acumulado', 'Accumulated_Capital'])
            if capital_col:
                ax2.plot(carteira_data.index, carteira_data[capital_col], 
                        color='blue', linewidth=2, marker='s')
                ax2.set_title('Evolu√ß√£o do Capital - Carteira de A√ß√µes', fontweight='bold')
                ax2.set_xlabel('Data')
                ax2.set_ylabel('Capital (R$)')
                ax2.grid(True, alpha=0.3)
        
        # Corrigir rota√ß√£o e layout
        plt.xticks(rotation=45, ha='right')
        plt.tight_layout()
        
        # Salvar e exibir
        filename = f"{self.output_dir}/evolucao_capital.png"
        fig.savefig(filename, dpi=300, bbox_inches='tight')
        plt.show()
        plt.close(fig)
        print(f"üìä Gr√°fico de evolu√ß√£o salvo: {filename}")
    
    def _plot_metrics_comparison(self, data: Dict, **kwargs):
        #Plota compara√ß√£o de m√©tricas
        juros_metrics = data.get('metricas_juros', {})
        carteira_metrics = data.get('metricas_carteira', {})
        
        if not juros_metrics or not carteira_metrics:
            return
        
        # Selecionar m√©tricas para comparar
        metrics_to_compare = ['CAGR', 'Annual_Volatility', 'Max_Drawdown', 'Sharpe_Ratio']
        available_metrics = [m for m in metrics_to_compare 
                           if m in juros_metrics and m in carteira_metrics]
        
        if not available_metrics:
            return
        
        # Criar gr√°fico de barras
        fig, ax = plt.subplots(figsize=(12, 6))
        
        x = np.arange(len(available_metrics))
        width = 0.35
        
        juros_values = [juros_metrics[m] for m in available_metrics]
        carteira_values = [carteira_metrics[m] for m in available_metrics]
        
        ax.bar(x - width/2, juros_values, width, label='Juros Fixos', color='green', alpha=0.7)
        ax.bar(x + width/2, carteira_values, width, label='Carteira de A√ß√µes', color='blue', alpha=0.7)
        
        ax.set_title('Compara√ß√£o de M√©tricas', fontsize=14, fontweight='bold')
        ax.set_ylabel('Valor')
        ax.set_xticks(x)
        ax.set_xticklabels(available_metrics)
        ax.legend()
        ax.grid(True, alpha=0.3)
        
        plt.tight_layout()
        
        # Salvar e exibir
        filename = f"{self.output_dir}/comparacao_metricas.png"
        fig.savefig(filename, dpi=300, bbox_inches='tight')
        plt.show()
        plt.close(fig)
        print(f"üìä Gr√°fico de m√©tricas salvo: {filename}")
    
    def _plot_simple_line(self, df: pd.DataFrame, title: str, **kwargs):
        #Plota gr√°fico de linha simples"""
        fig, ax = plt.subplots(figsize=(10, 6))
        
        # Encontrar coluna num√©rica
        numeric_cols = df.select_dtypes(include=[np.number]).columns
        if len(numeric_cols) == 0:
            return
        
        # Plotar primeira coluna num√©rica
        col = numeric_cols[0]
        ax.plot(df.index, df[col], linewidth=2, marker='o')
        ax.set_title(f'{title}', fontweight='bold')
        ax.set_xlabel('Data')
        ax.set_ylabel(col)
        ax.grid(True, alpha=0.3)
        
        # Corrigir rota√ß√£o e layout
        plt.xticks(rotation=45, ha='right')
        plt.tight_layout()
        
        # Salvar e exibir
        filename = f"{self.output_dir}/{title.lower().replace(' ', '_')}.png"
        fig.savefig(filename, dpi=300, bbox_inches='tight')
        plt.show()
        plt.close(fig)
        print(f"üìä Gr√°fico simples salvo: {filename}")
    
    def _find_column(self, df: pd.DataFrame, possible_names: List[str]) -> Optional[str]:
        for name in possible_names:
            if name in df.columns:
                return name
        return None

    def generate_phase3_report(self, data: dict, report_type: str = 'phase3'):
        """Gera relat√≥rio da Fase 3: Previs√µes e Backtesting"""
        print(f"üîÆ Gerando relat√≥rio da Fase 3...")
        
        if report_type == 'phase3':
            self._generate_phase3_report(data)
        else:
            print(f"‚ö†Ô∏è Tipo de relat√≥rio n√£o suportado: {report_type}")

    def _generate_phase3_report(self, data: dict):
        """Gera relat√≥rio completo da Fase 3"""
        try:
            # Extrair dados
            forecasts = data.get('forecasts', {})
            backtests = data.get('backtests', {})
            stock_data = data.get('stock_data', {})
            
            if not forecasts:
                print("‚ö†Ô∏è Nenhuma previs√£o encontrada para gerar gr√°ficos")
                return
            
            print(f"üìä Gerando {len(forecasts)} gr√°ficos de previs√µes...")
            
            # 1. Gr√°fico de previs√µes para cada ativo
            self._plot_forecasts(forecasts, stock_data)
            
            # 2. Gr√°fico de backtesting (se houver)
            if backtests:
                self._plot_backtest_results(backtests)
            
            # 3. Gr√°fico comparativo de m√©tricas
            if backtests:
                self._plot_forecast_metrics(backtests)
            
            print("‚úÖ Gr√°ficos da Fase 3 gerados com sucesso!")
            
        except Exception as e:
            print(f"‚ùå Erro ao gerar gr√°ficos da Fase 3: {e}")

    def _plot_forecasts(self, forecasts: dict, stock_data: dict):
        # Plota previs√µes vs dados hist√≥ricos
        try:
            fig, axes = plt.subplots(len(forecasts), 1, figsize=(12, 4*len(forecasts)))
            if len(forecasts) == 1:
                axes = [axes]
            
            for i, (ticker, forecast) in enumerate(forecasts.items()):
                ax = axes[i]
                
                # Dados hist√≥ricos
                if ticker in stock_data and 'Close' in stock_data[ticker].columns:
                    historical = stock_data[ticker]['Close']
                    ax.plot(historical.index, historical.values, 
                           label='Dados Hist√≥ricos', color='blue', linewidth=2)
                
                # Previs√µes
                ax.plot(forecast.index, forecast.values, 
                       label='Previs√µes', color='red', linestyle='--', linewidth=2)
                
                # Configura√ß√µes
                ax.set_title(f'Previs√µes para {ticker} - Pr√≥ximos {len(forecast)} dias')
                ax.set_xlabel('Data')
                ax.set_ylabel('Pre√ßo (R$)')
                ax.legend()
                ax.grid(True, alpha=0.3)
                
                # Rotacionar labels do eixo X
                plt.setp(ax.xaxis.get_majorticklabels(), rotation=45, ha='right')
            
            plt.tight_layout()
            
            # Salvar e mostrar
            filename = f'outputs/phase3_forecasts_{datetime.now().strftime("%Y%m%d_%H%M%S")}.png'
            os.makedirs('outputs', exist_ok=True)
            plt.savefig(filename, dpi=300, bbox_inches='tight')
            plt.show()
            plt.close(fig)
            
            print(f"üìà Gr√°fico de previs√µes salvo: {filename}")
            
        except Exception as e:
            print(f"‚ùå Erro ao plotar previs√µes: {e}")

    def _plot_backtest_results(self, backtests: dict):
        #Plota resultados do backtesting
        try:
            fig, axes = plt.subplots(len(backtests), 1, figsize=(12, 4*len(backtests)))
            if len(backtests) == 1:
                axes = [axes]
            
            for i, (ticker, results) in enumerate(backtests.items()):
                ax = axes[i]
                
                # Valores reais vs previstos
                actual = results.get('actual_values', [])
                predicted = results.get('predicted_values', [])
                
                if actual and predicted:
                    # Plotar apenas os primeiros 100 pontos para clareza
                    max_points = min(100, len(actual), len(predicted))
                    x = range(max_points)
                    
                    ax.plot(x, actual[:max_points], 
                           label='Valores Reais', color='blue', linewidth=2)
                    ax.plot(x, predicted[:max_points], 
                           label='Valores Previstos', color='red', linestyle='--', linewidth=2)
                    
                    # Configura√ß√µes
                    ax.set_title(f'Backtesting para {ticker}')
                    ax.set_xlabel('Per√≠odo')
                    ax.set_ylabel('Pre√ßo (R$)')
                    ax.legend()
                    ax.grid(True, alpha=0.3)
            
            plt.tight_layout()
            
            # Salvar e mostrar
            filename = f'outputs/phase3_backtest_{datetime.now().strftime("%Y%m%d_%H%M%S")}.png'
            plt.savefig(filename, dpi=300, bbox_inches='tight')
            plt.show()
            plt.close(fig)
            
            print(f"üîÑ Gr√°fico de backtesting salvo: {filename}")
            
        except Exception as e:
            print(f"‚ùå Erro ao plotar backtesting: {e}")

    def _plot_forecast_metrics(self, backtests: dict):
        # Plota m√©tricas comparativas de previs√£o
        try:
            # Preparar dados
            tickers = list(backtests.keys())
            mape_values = [backtests[t]['metrics']['avg_mape'] for t in tickers]
            rmse_values = [backtests[t]['metrics']['avg_rmse'] for t in tickers]
            
            # Criar gr√°fico de barras
            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
            
            # MAPE
            bars1 = ax1.bar(tickers, mape_values, color='skyblue', alpha=0.7)
            ax1.set_title('MAPE por Ativo (Menor = Melhor)')
            ax1.set_ylabel('MAPE (%)')
            ax1.grid(True, alpha=0.3)
            
            # Adicionar valores nas barras
            for bar, value in zip(bars1, mape_values):
                height = bar.get_height()
                ax1.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                        f'{value:.1f}%', ha='center', va='bottom')
            
            # RMSE
            bars2 = ax2.bar(tickers, rmse_values, color='lightcoral', alpha=0.7)
            ax2.set_title('RMSE por Ativo (Menor = Melhor)')
            ax2.set_ylabel('RMSE (R$)')
            ax2.grid(True, alpha=0.3)
            
            # Adicionar valores nas barras
            for bar, value in zip(bars2, rmse_values):
                height = bar.get_height()
                ax2.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                        f'{value:.2f}', ha='center', va='bottom')
            
            plt.tight_layout()
            
            # Salvar e mostrar
            filename = f'outputs/phase3_metrics_{datetime.now().strftime("%Y%m%d_%H%M%S")}.png'
            plt.savefig(filename, dpi=300, bbox_inches='tight')
            plt.show()
            plt.close(fig)
            
            print(f"üìä Gr√°fico de m√©tricas salvo: {filename}")
            
        except Exception as e:
            print(f"‚ùå Erro ao plotar m√©tricas: {e}")

    def _generate_integrated_report(self, data: Dict, **kwargs):
        """Gera relat√≥rio integrado com todas as fases"""
        print(f"üîç DEBUG: Gerando relat√≥rio integrado com dados: {list(data.keys())}")
        
        # Fase 1: An√°lise explorat√≥ria
        if 'stock_data' in data:
            print("üìä Gerando relat√≥rio Fase 1...")
            self._generate_phase1_report(data, **kwargs)
        
        # Fase 2: Simula√ß√£o de investimentos
        if 'juros_fixos' in data and 'carteira_acoes' in data:
            print("üí∞ Gerando relat√≥rio Fase 2...")
            self._generate_phase2_report(data, **kwargs)
        
        # Fase 3: Previs√µes (se dispon√≠vel)
        if 'forecasts' in data:
            print("üîÆ Gerando relat√≥rio Fase 3...")
            self._generate_phase3_report(data)
        
        # Relat√≥rio executivo integrado
        self._generate_executive_summary(data, **kwargs)

    def _generate_executive_summary(self, data: Dict, **kwargs):
        """Gera resumo executivo integrado"""
        print("\n" + "="*80)
        print("üìã RELAT√ìRIO EXECUTIVO INTEGRADO")
        print("="*80)
        
        if 'stock_data' in data:
            print(f"üìä FASE 1: An√°lise de {len(data['stock_data'])} ativos")
            print(f"   - Per√≠odo: {data.get('start_date', 'N/A')} a {data.get('end_date', 'N/A')}")
        
        if 'juros_fixos' in data and 'carteira_acoes' in data:
            print(f"üí∞ FASE 2: Simula√ß√£o de investimentos")
            print(f"   - Capital inicial: R$ {data.get('capital_inicial', 'N/A'):,.2f}")
            print(f"   - Aporte mensal: R$ {data.get('aporte_mensal', 'N/A'):,.2f}")
        
        if 'forecasts' in data:
            print(f"üîÆ FASE 3: Previs√µes futuras")
            print(f"   - Horizonte: {data.get('forecast_horizon', 'N/A')} dias")
        
        print("="*80)

class ReportFactory:
    #Factory para criar geradores de relat√≥rios
    @staticmethod
    def create_generator(report_type: str = 'simple', **kwargs) -> 'SimpleReportGenerator':
        if report_type.lower() == 'simple':
            return SimpleReportGenerator(**kwargs)
        else:
            raise ValueError(f"Tipo de relat√≥rio n√£o suportado: {report_type}")

def generate_comparison_table(df_juros, df_carteira, stock_data=None):
    # Gera tabela comparativa profissional entre cen√°rios
    try:
        # Debug: verificar estrutura dos DataFrames
        print(f"üîç DEBUG: df_juros colunas: {list(df_juros.columns)}")
        print(f"üîç DEBUG: df_carteira colunas: {list(df_carteira.columns)}")
        print(f"üîç DEBUG: df_juros shape: {df_juros.shape}")
        print(f"üîç DEBUG: df_carteira shape: {df_carteira.shape}")
        
        # Importar o calculador de m√©tricas
        from modules.metrics import create_default_metrics_calculator
        metrics_calc = create_default_metrics_calculator()
        
        # Calcular m√©tricas para Juros Compostos
        juros_metrics = metrics_calc.calculate_metrics(df_juros)
        print(f"üîç DEBUG: juros_metrics: {juros_metrics}")
        
        # Calcular m√©tricas para Carteira de A√ß√µes
        carteira_metrics = metrics_calc.calculate_metrics(df_carteira)
        print(f"üîç DEBUG: carteira_metrics: {carteira_metrics}")
        
        # Debug: verificar se as m√©tricas t√™m valores v√°lidos
        print(f"üîç DEBUG: juros_metrics keys: {list(juros_metrics.keys())}")
        print(f"üîç DEBUG: carteira_metrics keys: {list(carteira_metrics.keys())}")
        
        # Criar tabela comparativa
        comparison_data = {
            'M√©trica': [
                'Valor Final (R$)',
                'CAGR (%)',
                'Volatilidade Anualizada (%)',
                'M√°ximo Drawdown (%)',
                'Sharpe Ratio',
                'Retorno Total (%)'
            ],
            'Juros Compostos': [
                f"R$ {juros_metrics.get('Final_Capital', 0):,.2f}",
                f"{juros_metrics.get('CAGR', 0)*100:.2f}%",
                f"{juros_metrics.get('Annual_Volatility', 0):.2f}%",
                f"{juros_metrics.get('Max_Drawdown', 0):.2f}%",
                f"{juros_metrics.get('Sharpe_Ratio', 0):.3f}",
                f"{juros_metrics.get('Total_Return', 0):.2f}%"
            ],
            'Carteira de A√ß√µes': [
                f"R$ {carteira_metrics.get('Final_Capital', 0):,.2f}",
                f"{carteira_metrics.get('CAGR', 0)*100:.2f}%",
                f"{carteira_metrics.get('Annual_Volatility', 0):.2f}%",
                f"{carteira_metrics.get('Max_Drawdown', 0):.2f}%",
                f"{carteira_metrics.get('Sharpe_Ratio', 0):.3f}",
                f"{carteira_metrics.get('Total_Return', 0):.2f}%"
            ]
        }
        
        # Criar DataFrame da tabela
        comparison_df = pd.DataFrame(comparison_data)
        print(f"üîç DEBUG: Tabela criada com {len(comparison_df)} linhas")
        print(f"üîç DEBUG: Colunas da tabela: {list(comparison_df.columns)}")
        
        # Calcular diferen√ßas (extrair valores num√©ricos)
        def extract_numeric(value_str):
            # Extrai valor num√©rico de string formatada
            try:
                # Remove R$, % e converte para float
                clean_value = value_str.replace('R$ ', '').replace('%', '').replace(',', '')
                return float(clean_value)
            except:
                return 0.0
        
        # Calcular diferen√ßas (extrair valores num√©ricos)
        juros_values = [extract_numeric(val) for val in comparison_df['Juros Compostos']]
        carteira_values = [extract_numeric(val) for val in comparison_df['Carteira de A√ß√µes']]
        differences = [c - j for c, j in zip(carteira_values, juros_values)]
        
        # Formatar diferen√ßas baseado no tipo de m√©trica
        formatted_differences = []
        for i, (metric, diff) in enumerate(zip(comparison_df['M√©trica'], differences)):
            if 'R$' in comparison_df['Juros Compostos'].iloc[i]:
                # Para valores monet√°rios
                formatted_differences.append(f"+{diff:,.2f}" if diff > 0 else f"{diff:,.2f}")
            elif '%' in comparison_df['Juros Compostos'].iloc[i]:
                # Para percentuais
                formatted_differences.append(f"+{diff:.2f}%" if diff > 0 else f"{diff:.2f}%")
            else:
                # Para outros valores
                formatted_differences.append(f"+{diff:.3f}" if diff > 0 else f"{diff:.3f}")
        
        comparison_df['Diferen√ßa'] = formatted_differences
        print(f"üîç DEBUG: Tabela final com diferen√ßas calculadas")
        print(f"üîç DEBUG: Primeiras linhas da tabela:")
        print(comparison_df.head())
        
        return comparison_df
        
    except Exception as e:
        logger.error(f"Erro ao gerar tabela comparativa: {e}")
        return pd.DataFrame()

def print_comparison_table(comparison_df):
    #Imprime tabela comparativa formatada
    if comparison_df.empty:
        print("‚ùå Erro ao gerar tabela comparativa")
        return
    
    print("\n" + "="*100)
    print("üìä TABELA COMPARATIVA: JUROS COMPOSTOS vs CARTEIRA DE A√á√ïES")
    print("="*100)
    
    # Imprimir tabela formatada
    for idx, row in comparison_df.iterrows():
        print(f"{row['M√©trica']:<30} | {row['Juros Compostos']:<20} | {row['Carteira de A√ß√µes']:<20} | {row['Diferen√ßa']:<15}")
        if idx == 0:  # Separador ap√≥s cabe√ßalho
            print("-"*100)
    
    print("="*100)
    
    # Resumo executivo
    print("\nüèÜ RESUMO EXECUTIVO:")
    
    # Extrair valor final para compara√ß√£o
    try:
        juros_final_str = comparison_df.iloc[0]['Juros Compostos']
        carteira_final_str = comparison_df.iloc[0]['Carteira de A√ß√µes']
        
        juros_final = float(juros_final_str.replace('R$ ', '').replace(',', ''))
        carteira_final = float(carteira_final_str.replace('R$ ', '').replace(',', ''))
        
        if carteira_final > juros_final:
            diferenca = carteira_final - juros_final
            print(f"‚úÖ CARTEIRA SUPERIOR em R$ {diferenca:,.2f}")
            print(f"üìà Vantagem: {(diferenca/juros_final)*100:.1f}% sobre juros fixos")
        else:
            diferenca = juros_final - carteira_final
            print(f"‚ö†Ô∏è JUROS FIXOS SUPERIOR em R$ {diferenca:,.2f}")
            print(f"üìâ Desvantagem: {(diferenca/carteira_final)*100:.1f}% sobre carteira")
    except Exception as e:
        print(f"‚ö†Ô∏è N√£o foi poss√≠vel calcular resumo executivo: {e}")
